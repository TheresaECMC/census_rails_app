<!-- <script src="//maps.google.com/maps/api/js?v=3.18&sensor=false&client=&key=&libraries=geometry&language=&hl=&region="></script>  -->


<h1>Cencus Data for Each Person</h1>

<div class='data_person'>
  <% @person_data_written.each do |individual_data|%>
    <h2><%= individual_data.person.name %></h2>
    <p>
      <div class="data_facts">They live in <%= individual_data.person.state.name%> which has a population of <%= number_with_delimiter(individual_data.state_pop, :delimiter => ',') %>.
      </div>
    </p>
    <p>
      <div class="data_facts">In <%= individual_data.person.state.name%> there are <%= number_with_delimiter(individual_data.gender_pop, :delimiter => ',') %> <%= individual_data.person.sex.downcase%>s.
      </div>
    </p>
    <p>
      <div class="data_facts">Of the <%= number_with_delimiter(individual_data.state_pop, :delimiter => ',') %> people in <%= individual_data.person.state.name%>, <%= number_with_delimiter(individual_data.gender_race_pop, :delimiter => ',') %> of them are also <%= individual_data.person.race.name%> and <%= individual_data.person.sex.downcase%> and <%= number_with_delimiter(individual_data.gender_age_pop, :delimiter => ',') %> of them are also <%= individual_data.person.sex.downcase%> and <%= individual_data.person.age%>.
      </div>
    </p>
    <p>
      <div>Combining all your data together, of the <%= number_with_delimiter(individual_data.state_pop, :delimiter => ',') %> people in <%= individual_data.person.state.name%>, <%= number_with_delimiter(individual_data.gender_age_and_race_pop, :delimiter => ',') %> of them are also a <%= individual_data.person.age%>-year-old, <%= individual_data.person.race.name%> <%= individual_data.person.sex.downcase%>.
      </div>
    </p>
    <p>
      <div>Finally, since <%= individual_data.person.state.name%> is <%= number_with_delimiter(individual_data.person.state.land_area, :delimiter => ',') %> square miles, you would only have to walk  <%= individual_data.diameter_of_a_circle(individual_data.person_per_sq_miles_math(individual_data.gender_age_and_race_pop)).round(2)%> miles, to meet another <%= individual_data.person.age%>-year-old, <%= individual_data.person.race.name%> <%= individual_data.person.sex.downcase%>.
      </div>
    </p>
    <p>
      <div>Interesting, right!?
      </div>
    </p><br>
  <%end%>
</div>

<div class ="info_break">
  <p>
    Check out the data on the GoogleMaps. Want to meet a person of simliar race, sex and age? Statistically, all you have to do is walk outside the circle!
  </p>  
  <p>
    <%if @search == nil%>
      There's even some bars within the circle to ensure you're a unique individual whenever you go out!
    <%else%>
      There's even some <%= @search[:query][0].pluralize%> within the circle to ensure you're a unique individual whenever you go out!
    <%end%>
  </p>
</div>
<div class='google_search'>
  <%if @search == nil%>
    Not into bars? Pick something else where you'll be statistically unique!  Search something else: 
  <%else%>
    Not into <%= @search[:query][0].pluralize%>? Pick something else where you'll be statistically unique!  Search something else: 
  <%end%>
  <div class="search_field">
    <%= form_tag('/google_query', method: :get) do %>
      <%= text_field_tag(:google_query)%>
      <%= submit_tag("Amend Search")%>
    <%end%>
  </div>
</div>
<ul class="circles">
  <li>
    The <span style="color: #FF0000" font-weight:bold>RED</span> circle is the gender, age, and race uniqueness.
  </li>
  <li>
    The <span style="color: #236B8E" font-weight:bold>BLUE</span> circle is the age uniqueness.
  </li>
  <li>
    The <span style="color: #FFB00F" font-weight:bold>YELLOW</span> circle is the gender and age uniqueness.
  </li>
  <li>
    The <span style="color: #488214" font-weight:bold>GREEN</span> circle is the gender and race uniqueness.
  </li>
  <li>
    The <span style="color: #551A8B" font-weight:bold>PURPLE</span> circle is the gender uniqueness.
  </li>
</ul>
<div style='width: 800px;'>
  <div id="map" style='width: 800px; height: 400px;'></div>

<%if @search != nil%>
  <script type="text/javascript">
    var person_info_hash = <%=raw @google_hash.to_json%>;
    console.log("I'm in the 'if'");
    var search = <%=raw @search.to_json%>;
  </script>
<%else%>
  <script type="text/javascript">
    var person_info_hash = <%=raw @google_hash.to_json%>;
    var circle_one = <%=raw @circle_one.to_json%>;
    var circle_two = <%=raw @circle_two.to_json%>;
    var circle_three = <%=raw @circle_three.to_json%>;
    var circle_four = <%=raw @circle_four.to_json%>;
    var search = {query: ['bar']};
    console.log("I'm in the else");
  </script>
<%end %>

<script type="text/javascript">
var map;
var infowindow;

function initMap() {
  debugger
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 4,
    center: {lat: 32.776 , lng: -79.931 },
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  for (var person in person_info_hash) {
    var image = {
      url: person_info_hash[person].image_url,
      size: new google.maps.Size(32, 32),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(16, 16)
    };
    var markers = new google.maps.Marker({
      position: person_info_hash[person].marker_location,
      map: map,
      title: person,
      icon: image,
      zIndex: 99999
    });
    var content = person_info_hash[person].info_window_text
    infowindow = new google.maps.InfoWindow();
    
    mouseoverAndMouseoutEvents(markers, content, infowindow);
  }
  console.log(search['query'])
  addBarsToMap(person_info_hash, map, search['query']);
  addCirclesToMap(person_info_hash, map);
  
  addSmallerCirclesToMap(circle_one, map);
  addSmallerCirclesToMap(circle_two, map);
  addSmallerCirclesToMap(circle_three, map);
  addSmallerCirclesToMap(circle_four, map);
}

function addBarsToMap(hash, map, search_query){
  for (var person in hash) {
    var bar_markers = new google.maps.places.PlacesService(map);
    bar_markers.nearbySearch({
      location: hash[person].marker_location,
      radius: hash[person].radius,
      types: search_query
    }, callback);
  }
}

function addCirclesToMap(hash, map){
  for (var person in hash) {
    var circles = new google.maps.Circle({
      strokeColor: '#FF0000',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#FF0000',
      fillOpacity: 0.35,
      map: map,
      center: hash[person].marker_location,
      radius: hash[person].radius
    });
  }
} 

function addSmallerCirclesToMap(hash, map){
  for (var person in hash) {
    var circles = new google.maps.Circle({
      strokeColor: hash[person].circle_color,
      strokeOpacity: 0.9,
      strokeWeight: 2.5,
      fillColor: hash[person].circle_color,
      fillOpacity: 0.05,
      map: map,
      center: hash[person].marker_location,
      radius: hash[person].api_radius
    });
  }
} 

function mouseoverAndMouseoutEvents(markers, content, infowindow){
  google.maps.event.addListener(markers, 'mouseover', (function(markers, content, infowindow){
    return function(){
      infowindow.setContent(content);
      infowindow.open(map, markers);
    };
  })(markers, content, infowindow));

  google.maps.event.addListener(markers, 'mouseout', (function(markers, content, infowindow){
    return function(){
      infowindow.close();
    };
  })(markers, content, infowindow));
}

function callback(results, status) {
  if (status === google.maps.places.PlacesServiceStatus.OK) {
    for (var i = 0; i < results.length; i++) {
      createBarMarkers(results[i]);
    }
  }
}

function createBarMarkers(place) {
  var marker = new google.maps.Marker({
    position: place.geometry.location,
    map: map,
    title: place.name
  });
}
</script>


<% custom_url = "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY']}&callback=initMap&libraries=geometry,places"-%>
  <script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js"></script>

<script src="<%= custom_url %>" async defer>
</script>
